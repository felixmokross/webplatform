/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    'api-keys': ApiKeyAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    mediaCategory: MediaCategory;
    users: User;
    'api-keys': ApiKey;
    'locale-configs': LocaleConfig;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    mediaCategory: {
      media: 'media';
    };
  };
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    mediaCategory: MediaCategorySelect<false> | MediaCategorySelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'api-keys': ApiKeysSelect<false> | ApiKeysSelect<true>;
    'locale-configs': LocaleConfigsSelect<false> | LocaleConfigsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Settings;
    common: Common;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
    common: CommonSelect<false> | CommonSelect<true>;
  };
  locale:
    | 'en'
    | 'en-US'
    | 'en-GB'
    | 'en-CA'
    | 'en-AU'
    | 'zh'
    | 'zh-CN'
    | 'zh-TW'
    | 'zh-HK'
    | 'es'
    | 'es-ES'
    | 'es-MX'
    | 'es-AR'
    | 'es-CO'
    | 'es-CL'
    | 'ar'
    | 'ar-SA'
    | 'ar-EG'
    | 'ar-AE'
    | 'pt'
    | 'pt-BR'
    | 'pt-PT'
    | 'fr'
    | 'fr-FR'
    | 'fr-CA'
    | 'de'
    | 'de-DE'
    | 'ja'
    | 'ja-JP'
    | 'ru'
    | 'ru-RU'
    | 'hi'
    | 'hi-IN'
    | 'it'
    | 'it-IT'
    | 'ko'
    | 'ko-KR'
    | 'tr'
    | 'tr-TR'
    | 'pl'
    | 'pl-PL'
    | 'nl'
    | 'nl-NL'
    | 'sv'
    | 'sv-SE'
    | 'fi'
    | 'fi-FI'
    | 'no'
    | 'no-NO'
    | 'da'
    | 'da-DK'
    | 'id'
    | 'id-ID'
    | 'ms'
    | 'ms-MY'
    | 'th'
    | 'th-TH'
    | 'vi'
    | 'vi-VN'
    | 'he'
    | 'he-IL'
    | 'fa'
    | 'fa-IR'
    | 'uk'
    | 'uk-UA'
    | 'cs'
    | 'cs-CZ'
    | 'sk'
    | 'sk-SK'
    | 'ro'
    | 'ro-RO'
    | 'hu'
    | 'hu-HU'
    | 'el'
    | 'el-GR'
    | 'bn'
    | 'bn-BD'
    | 'bn-IN'
    | 'ta'
    | 'ta-IN'
    | 'te'
    | 'te-IN'
    | 'ml'
    | 'ml-IN'
    | 'mr'
    | 'mr-IN'
    | 'pa'
    | 'pa-IN'
    | 'gu'
    | 'gu-IN'
    | 'ur'
    | 'ur-PK'
    | 'sw'
    | 'sw-KE'
    | 'af'
    | 'af-ZA'
    | 'am'
    | 'am-ET'
    | 'et'
    | 'et-EE'
    | 'lv'
    | 'lv-LV'
    | 'lt'
    | 'lt-LT'
    | 'sl'
    | 'sl-SI'
    | 'sr'
    | 'sr-RS'
    | 'hr'
    | 'hr-HR'
    | 'bg'
    | 'bg-BG'
    | 'ka'
    | 'ka-GE'
    | 'az'
    | 'az-AZ'
    | 'hy'
    | 'hy-AM'
    | 'ne'
    | 'ne-NP'
    | 'si'
    | 'si-LK'
    | 'my'
    | 'my-MM'
    | 'km'
    | 'km-KH'
    | 'lo'
    | 'lo-LA'
    | 'mn'
    | 'mn-MN'
    | 'kk'
    | 'kk-KZ'
    | 'uz'
    | 'uz-UZ'
    | 'ps'
    | 'ps-AF'
    | 'es-419'
    | 'zh-Hans'
    | 'zh-Hant'
    | 'nb';
  user:
    | (User & {
        collection: 'users';
      })
    | (ApiKey & {
        collection: 'api-keys';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ApiKeyAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  category?: (string | null) | MediaCategory;
  comment?: string | null;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory".
 */
export interface MediaCategory {
  id: string;
  name: string;
  media?: {
    docs?: (string | Media)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'editor' | 'admin';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-keys".
 */
export interface ApiKey {
  id: string;
  role: 'cicd' | 'frontend' | 'e2e-tests';
  remark?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locale-configs".
 */
export interface LocaleConfig {
  id: string;
  locale:
    | 'af'
    | 'af-ZA'
    | 'am'
    | 'am-ET'
    | 'ar'
    | 'ar-AE'
    | 'ar-EG'
    | 'ar-SA'
    | 'az'
    | 'az-AZ'
    | 'bg'
    | 'bg-BG'
    | 'bn'
    | 'bn-BD'
    | 'bn-IN'
    | 'cs'
    | 'cs-CZ'
    | 'da'
    | 'da-DK'
    | 'de'
    | 'de-DE'
    | 'el'
    | 'el-GR'
    | 'en'
    | 'en-AU'
    | 'en-CA'
    | 'en-GB'
    | 'en-US'
    | 'es'
    | 'es-419'
    | 'es-AR'
    | 'es-CL'
    | 'es-CO'
    | 'es-ES'
    | 'es-MX'
    | 'et'
    | 'et-EE'
    | 'fa'
    | 'fa-IR'
    | 'fi'
    | 'fi-FI'
    | 'fr'
    | 'fr-CA'
    | 'fr-FR'
    | 'gu'
    | 'gu-IN'
    | 'he'
    | 'he-IL'
    | 'hi'
    | 'hi-IN'
    | 'hr'
    | 'hr-HR'
    | 'hu'
    | 'hu-HU'
    | 'hy'
    | 'hy-AM'
    | 'id'
    | 'id-ID'
    | 'it'
    | 'it-IT'
    | 'ja'
    | 'ja-JP'
    | 'ka'
    | 'ka-GE'
    | 'kk'
    | 'kk-KZ'
    | 'km'
    | 'km-KH'
    | 'ko'
    | 'ko-KR'
    | 'lo'
    | 'lo-LA'
    | 'lt'
    | 'lt-LT'
    | 'lv'
    | 'lv-LV'
    | 'ml'
    | 'ml-IN'
    | 'mn'
    | 'mn-MN'
    | 'mr'
    | 'mr-IN'
    | 'ms'
    | 'ms-MY'
    | 'my'
    | 'my-MM'
    | 'nb'
    | 'ne'
    | 'ne-NP'
    | 'nl'
    | 'nl-NL'
    | 'no'
    | 'no-NO'
    | 'pa'
    | 'pa-IN'
    | 'pl'
    | 'pl-PL'
    | 'ps'
    | 'ps-AF'
    | 'pt'
    | 'pt-BR'
    | 'pt-PT'
    | 'ro'
    | 'ro-RO'
    | 'ru'
    | 'ru-RU'
    | 'si'
    | 'si-LK'
    | 'sk'
    | 'sk-SK'
    | 'sl'
    | 'sl-SI'
    | 'sr'
    | 'sr-RS'
    | 'sv'
    | 'sv-SE'
    | 'sw'
    | 'sw-KE'
    | 'ta'
    | 'ta-IN'
    | 'te'
    | 'te-IN'
    | 'th'
    | 'th-TH'
    | 'tr'
    | 'tr-TR'
    | 'uk'
    | 'uk-UA'
    | 'ur'
    | 'ur-PK'
    | 'uz'
    | 'uz-UZ'
    | 'vi'
    | 'vi-VN'
    | 'zh'
    | 'zh-CN'
    | 'zh-Hans'
    | 'zh-Hant'
    | 'zh-HK'
    | 'zh-TW';
  displayLabel: string;
  deeplSourceLanguage?:
    | (
        | 'ar'
        | 'bg'
        | 'cs'
        | 'da'
        | 'de'
        | 'el'
        | 'en'
        | 'es'
        | 'et'
        | 'fi'
        | 'fr'
        | 'he'
        | 'hu'
        | 'id'
        | 'it'
        | 'ja'
        | 'ko'
        | 'lt'
        | 'lv'
        | 'nb'
        | 'nl'
        | 'pl'
        | 'pt'
        | 'ro'
        | 'ru'
        | 'sk'
        | 'sl'
        | 'sv'
        | 'th'
        | 'tr'
        | 'uk'
        | 'vi'
        | 'zh'
      )
    | null;
  deeplTargetLanguage?:
    | (
        | 'ar'
        | 'bg'
        | 'cs'
        | 'da'
        | 'de'
        | 'el'
        | 'en-GB'
        | 'en-US'
        | 'es'
        | 'es-419'
        | 'et'
        | 'fi'
        | 'fr'
        | 'he'
        | 'hu'
        | 'id'
        | 'it'
        | 'ja'
        | 'ko'
        | 'lt'
        | 'lv'
        | 'nb'
        | 'nl'
        | 'pl'
        | 'pt-BR'
        | 'pt-PT'
        | 'ro'
        | 'ru'
        | 'sk'
        | 'sl'
        | 'sv'
        | 'th'
        | 'tr'
        | 'uk'
        | 'vi'
        | 'zh-Hans'
        | 'zh-Hant'
      )
    | null;
  googleMapsLanguage?:
    | (
        | 'af'
        | 'am'
        | 'ar'
        | 'az'
        | 'bg'
        | 'bn'
        | 'cs'
        | 'da'
        | 'de'
        | 'el'
        | 'en'
        | 'en-AU'
        | 'en-GB'
        | 'es'
        | 'es-419'
        | 'et'
        | 'fa'
        | 'fi'
        | 'fr'
        | 'fr-CA'
        | 'gu'
        | 'hi'
        | 'hr'
        | 'hu'
        | 'hy'
        | 'id'
        | 'it'
        | 'ja'
        | 'ka'
        | 'kk'
        | 'km'
        | 'ko'
        | 'lo'
        | 'lt'
        | 'lv'
        | 'ml'
        | 'mn'
        | 'mr'
        | 'ms'
        | 'my'
        | 'ne'
        | 'nl'
        | 'no'
        | 'pa'
        | 'pl'
        | 'pt'
        | 'pt-BR'
        | 'pt-PT'
        | 'ro'
        | 'ru'
        | 'si'
        | 'sk'
        | 'sl'
        | 'sr'
        | 'sv'
        | 'sw'
        | 'ta'
        | 'te'
        | 'th'
        | 'tr'
        | 'uk'
        | 'ur'
        | 'uz'
        | 'vi'
        | 'zh'
        | 'zh-CN'
        | 'zh-HK'
        | 'zh-TW'
      )
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'mediaCategory';
        value: string | MediaCategory;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'api-keys';
        value: string | ApiKey;
      } | null)
    | ({
        relationTo: 'locale-configs';
        value: string | LocaleConfig;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'api-keys';
        value: string | ApiKey;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'api-keys';
        value: string | ApiKey;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  category?: T;
  comment?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory_select".
 */
export interface MediaCategorySelect<T extends boolean = true> {
  name?: T;
  media?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-keys_select".
 */
export interface ApiKeysSelect<T extends boolean = true> {
  role?: T;
  remark?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locale-configs_select".
 */
export interface LocaleConfigsSelect<T extends boolean = true> {
  id?: T;
  locale?: T;
  displayLabel?: T;
  deeplSourceLanguage?: T;
  deeplTargetLanguage?: T;
  googleMapsLanguage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Settings {
  id: string;
  publishedLocales: {
    /**
     * Select locales with completely translated content to make them available to the user on the website. To add a new locale, it must be first added to the 'Locale Configurations' collection.
     */
    publishedLocales: (string | LocaleConfig)[];
    /**
     * The fallback locale is used when a translation is not available in the requested locale. It must be one of the published locales.
     */
    fallbackLocale: string | LocaleConfig;
  };
  /**
   * Hide the complete website and show a maintenance screen instead.
   */
  maintenanceScreen?: {
    show?: boolean | null;
    message?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common".
 */
export interface Common {
  id: string;
  pageNotFoundScreen?: {
    heading?: string | null;
    text?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  errorScreen?: {
    heading?: string | null;
    text?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  uiLabels?: {
    errorBoundary?: {
      title?: string | null;
      text?: string | null;
    };
    maintenanceScreen?: {
      login?: string | null;
    };
    login?: {
      email?: string | null;
      password?: string | null;
      submit?: string | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  publishedLocales?:
    | T
    | {
        publishedLocales?: T;
        fallbackLocale?: T;
      };
  maintenanceScreen?:
    | T
    | {
        show?: T;
        message?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common_select".
 */
export interface CommonSelect<T extends boolean = true> {
  pageNotFoundScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  errorScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  uiLabels?:
    | T
    | {
        errorBoundary?:
          | T
          | {
              title?: T;
              text?: T;
            };
        maintenanceScreen?:
          | T
          | {
              login?: T;
            };
        login?:
          | T
          | {
              email?: T;
              password?: T;
              submit?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}